To update all components as specified in the com.json file, you can write a Python script that reads the JSON file and updates the corresponding files in your project directory. This script would:

Read com.json.
For each component in the JSON file:
Find the corresponding .tsx file in your project directory.
Replace the content of the file with the updated_code from the JSON.
Here's a basic Python script to achieve this:

python
Copy code
import json
import os

# Path to your project directory where the .tsx files are located
project_directory = '/path/to/your/project/directory'

# Path to the com.json file
json_file_path = '/path/to/com.json'

# Read JSON data
with open(json_file_path, 'r') as file:
    data = json.load(file)

# Update components
for component in data['components']:
    file_path = os.path.join(project_directory, component['filename'])
    updated_code = component['updated_code']
    
    if os.path.exists(file_path):
        with open(file_path, 'w') as file:
            file.write(updated_code)
        print(f"Updated {component['filename']}")
    else:
        print(f"File not found: {component['filename']}")

Before running this script, replace /path/to/your/project/directory with the actual path to your project directory and /path/to/com.json with the path to the com.json file.

Important Notes:

Backup Your Project: Before running such a script, always make sure to back up your project, as this will overwrite files.
Testing: After running the script, thoroughly test your application to ensure that all updates are correct and that there are no issues.
Version Control: If you're using a version control system like Git, consider doing this in a separate branch to ensure that you can review changes and merge them after thorough testing.
This script assumes that the .tsx file names in your project match exactly with those specified in the JSON file and that the directory structure is flat. If your project has a different structure, you might need to adjust the script accordingly.